var documenterSearchIndex = {"docs":
[{"location":"api/#Structs","page":"API","title":"Structs","text":"","category":"section"},{"location":"api/#ManifoldAPI","page":"API","title":"ManifoldAPI","text":"","category":"section"},{"location":"api/#ManifoldAPIs.ManifoldAPI","page":"API","title":"ManifoldAPIs.ManifoldAPI","text":"ManifoldAPI <: AbstractAPI\n\nBasic object for Manifold API \n\nFields\n\napi_url::String: base url for API\n\n\n\n\n\n","category":"type"},{"location":"api/#Market","page":"API","title":"Market","text":"","category":"section"},{"location":"api/#ManifoldAPIs.Market","page":"API","title":"ManifoldAPIs.Market","text":"Market\n\nAn abstract market type.\n\n\n\n\n\n","category":"type"},{"location":"api/#Multiple","page":"API","title":"Multiple","text":"","category":"section"},{"location":"api/#ManifoldAPIs.Multiple","page":"API","title":"ManifoldAPIs.Multiple","text":"Multiple <: Multiple\n\nAn abstract type for markets with multiple outcomes\n\n\n\n\n\n","category":"type"},{"location":"api/#MultipleLinked","page":"API","title":"MultipleLinked","text":"","category":"section"},{"location":"api/#ManifoldAPIs.MultipleLinked","page":"API","title":"ManifoldAPIs.MultipleLinked","text":"MultipleLinked <: Multiple\n\nA set of multiple related market with prices that sum to 1.  \n\n\n\n\n\n","category":"type"},{"location":"api/#MultipleUnlinked","page":"API","title":"MultipleUnlinked","text":"","category":"section"},{"location":"api/#ManifoldAPIs.MultipleUnlinked","page":"API","title":"ManifoldAPIs.MultipleUnlinked","text":"MultipleUnlinked <: Multiple\n\nA set of multiple related market with prices that are not required to sum to 1.  \n\n\n\n\n\n","category":"type"},{"location":"api/#Single","page":"API","title":"Single","text":"","category":"section"},{"location":"api/#ManifoldAPIs.Single","page":"API","title":"ManifoldAPIs.Single","text":"Single <: Market\n\nA market for a single binary outcome. \n\n\n\n\n\n","category":"type"},{"location":"api/#Get-Functions","page":"API","title":"Get Functions","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"The functions described in this section allows the user to request market information from Manifold.","category":"page"},{"location":"api/#get_all_markets","page":"API","title":"get_all_markets","text":"","category":"section"},{"location":"api/#ManifoldAPIs.get_all_markets","page":"API","title":"ManifoldAPIs.get_all_markets","text":"get_all_markets(api::AbstractAPI)\n\nReturns information for 1000 prediction markets. \n\nArguments\n\napi::AbstractAPI: API object \n\nExample\n\nusing ManifoldAPIs\n\napi = ManifoldAPI()\nmarkets = get_all_markets(api)\n\n\n\n\n\n","category":"function"},{"location":"api/#get_market_by_slug","page":"API","title":"get_market_by_slug","text":"","category":"section"},{"location":"api/#ManifoldAPIs.get_market_by_slug","page":"API","title":"ManifoldAPIs.get_market_by_slug","text":"get_market_by_slug(api::AbstractAPI, market_slug)\n\nReturns prediction market information by slug.\n\nArguments\n\napi::AbstractAPI: API object \nmarket_slug: market descriptor e.g., supreme-court-rules-trump-tariffs-u in https://manifold.markets/QuimLast/supreme-court-rules-trump-tariffs-u\n\nExample\n\nusing ManifoldAPIs\n\napi = ManifoldAPI()\nmarket_slug = \"supreme-court-rules-trump-tariffs-u\"\nmarket = get_market_by_slug(api, market_slug)\n\n\n\n\n\n","category":"function"},{"location":"api/#get_market_price","page":"API","title":"get_market_price","text":"","category":"section"},{"location":"api/#ManifoldAPIs.get_market_price","page":"API","title":"ManifoldAPIs.get_market_price","text":"get_market_price(api::AbstractAPI, market_id)\n\nReturns market price based on market id. \n\nArguments\n\napi::AbstractAPI: API object \nmarket_id: unique market id \n\nExample\n\nusing ManifoldAPIs\napi = ManifoldAPI()\nget_market_price(api, \"9t61v9e7x4\")\n\n\n\n\n\n","category":"function"},{"location":"api/#get_bets","page":"API","title":"get_bets","text":"","category":"section"},{"location":"api/#ManifoldAPIs.get_bets","page":"API","title":"ManifoldAPIs.get_bets","text":"get_bets(api::AbstractAPI;\n    market_id = \"\",\n    user_name = \"\",\n    market_slug = \"\",\n    limit  = \"\",\n    before  = \"\",\n    after  = \"\",\n    before_time  = \"\",\n    after_time  = \"\",\n    kinds  = \"\",\n    order  = \"\",\n)\n\nReturns a vector of bets or trades for a given market id and/or user. \n\nArguments\n\napi::AbstractAPI: API object \n\nKeywords\n\nmarket_id = \"\": unique market id\nusername = \"\": username associated with a trader\nmarket_slug = \"\": market descriptor e.g., supreme-court-rules-trump-tariffs-u in https://manifold.markets/QuimLast/supreme-court-rules-trump-tariffs-u\nlimit  = \"\":  the number of bets to return. The default and maximum are both 1000.\nbefore  = \"\":  Include only bets created before the bet with this ID.   For example, if you ask for the most recent 10 bets, and then perform a second query for 10 more bets with    before=[the id of the 10th bet], you will get bets 11 through 20.\nafter  = \"\": Include only bets created after the bet with this ID.   For example, if you request the 10 most recent bets and then perform a second query with after=[the id of the 1st bet],    you will receive up to 10 new bets, if available.\nbefore_time  = \"\": include only bets created before this timestamp.\nafter_time  = \"\": include only bets created after this timestamp.\nkinds  = \"\": Specifies subsets of bets to return. Possible kinds: open-limit (open limit orders,    including ones on closed and reolved markets).\norder  = \"\": asc or desc (default). The sorting order for returned bets.\n\nExample\n\nusing ManifoldAPIs\napi = ManifoldAPI()\nget_bets(api; market_slug = \"supreme-court-rules-trump-tariffs-u\")\n\n\n\n\n\n","category":"function"},{"location":"api/#Post-Functions","page":"API","title":"Post Functions","text":"","category":"section"},{"location":"api/#make_bet","page":"API","title":"make_bet","text":"","category":"section"},{"location":"api/#ManifoldAPIs.make_bet","page":"API","title":"ManifoldAPIs.make_bet","text":"make_bet(api::AbstractAPI, header, order)\n\nCompletes a transaction for a specified amount and market. Details about the API can be found at  https://docs.manifold.markets/api#post-v0bet\n\nArguments\n\napi::AbstractAPI: API object \nheader: a dictionary or other compliant data structure containing authorization details \norder: a dictionary or other compliant data structure containing details of transaction. \n\nExample\n\nusing ManifoldAPIs\n\nheader = Dict(\n    \"Authorization\" => \"Key authorization_key_here\",\n    \"Content-Type\" => \"application/json\"\n)\n\norder = Dict(\n    \"contractId\" => \"HtsxyBopv0MSywM0f0Yp\",\n    \"amount\" => 10,\n    \"outcome\" => \"YES\",\n    \"dryRun\" => true\n)\n\napi = ManifoldAPI()\nmake_bet(api, header, order)\n\n\n\n\n\n","category":"function"},{"location":"api/#cancel_limit_order","page":"API","title":"cancel_limit_order","text":"","category":"section"},{"location":"api/#ManifoldAPIs.cancel_limit_order","page":"API","title":"ManifoldAPIs.cancel_limit_order","text":"cancel_limit_order(api::AbstractAPI, header, bet_id)\n\nCancels a limit order based on bet ID. \n\nhttps://docs.manifold.markets/api#post-v0bet\n\nArguments\n\napi::AbstractAPI: API object \nheader: a dictionary or other compliant data structure containing authorization details \nbet_id: the bet id found in the server response: response.betId \n\nExample\n\nThe example below illustrates how to submit a limit order and cancel it based on the betId. Note that \"dryRun\" needs to be set to false for the example to fully work. \n\nusing ManifoldAPIs\n\nheader = Dict(\n    \"Authorization\" => \"Key authorization_key_here\",\n    \"Content-Type\" => \"application/json\"\n)\n\norder = Dict(\n    \"contractId\" => \"HtsxyBopv0MSywM0f0Yp\",\n    \"amount\" => 10,\n    \"outcome\" => \"YES\",\n    \"limitProb\" => .10,\n    \"dryRun\" => true\n)\n\napi = ManifoldAPI()\nresponse = make_bet(api, header, order)\ncancel_limit_order(api, response.betId)\n\n\n\n\n\n","category":"function"},{"location":"api/#DataFrame-Extensions","page":"API","title":"DataFrame Extensions","text":"","category":"section"},{"location":"api/#create_dataframe","page":"API","title":"create_dataframe","text":"","category":"section"},{"location":"api/#ManifoldAPIs.create_dataframe","page":"API","title":"ManifoldAPIs.create_dataframe","text":"create_dataframe(\n    market, \n    bets;\n    columns = [\n        \"userId\",\n        \"outcome\",\n        \"amount\",\n        \"shares\",\n        \"answerId\",\n        \"updatedTime\",\n        \"createdTime\",\n        \"probAfter\"\n    ]\n)\n\nConverts JSON object holding market data to a DataFrame.\n\nArguments\n\nmarket: a JSON3 object containing market information\nbets: a JSON3 object containing price history\n\nKeywords\n\ncolumns: columns to include in the DataFrame. See the function signature above for default columns.\n\n\n\n\n\n","category":"function"},{"location":"api/#StatsPlots-Extensions","page":"API","title":"StatsPlots Extensions","text":"","category":"section"},{"location":"api/#plot_prices","page":"API","title":"plot_prices","text":"","category":"section"},{"location":"api/#ManifoldAPIs.plot_prices","page":"API","title":"ManifoldAPIs.plot_prices","text":"plot_prices(df::DataFrame; kwargs...)\n\nArguments\n\ndf::DataFrame: a DataFrame containing market information and price history \n\nKeywords\n\nconfig...: optional keyword arguments to modify the plot configuration\n\nExample\n\nusing ManifoldAPIs\nusing DataFrames \nusing StatsPlots \n\napi = ManifoldAPI()\nmarket_slug = \"supreme-court-rules-trump-tariffs-u\"\nmarket = get_market_by_slug(api, market_slug)\nbets = get_bets(api; market_slug)\n\ndf = create_dataframe(market, bets)\nplot_prices(df; size = (800, 400))\n\n\n\n\n\n","category":"function"},{"location":"api/#Utilities","page":"API","title":"Utilities","text":"","category":"section"},{"location":"api/#buy_shares","page":"API","title":"buy_shares","text":"","category":"section"},{"location":"api/#ManifoldAPIs.buy_shares","page":"API","title":"ManifoldAPIs.buy_shares","text":"buy_shares(\n    api,\n    market_type; \n    target_prices,\n    max_amount,\n    header,\n    slug,\n    dry_run = false,\n)\n\nSpecifiy a vector of target prices and buy shares for a total up to max_amount of Mana. Outstanding limit orders are  automatically canceled.\n\nArguments\n\napi::AbstractAPI: API object \nmarket_type: the market type. Currently Single and Multiple are supported. \n\nKeywords\n\ntarget_prices: a vector of target prices for Multiple markets or a scalar for a Single market max_amount: the maximum amount of Mana to be spent \n\nheader: a dictionary or other compliant data structure containing authorization details \n\nslug:\n\ndry_run = false: if false, executes the order. If true, simulates the execution of an order \n\nExample\n\nThe market used in the example below consists of 9 unlinked markets (i.e., their prices are not required to sum to 1), which can be found here: https://manifold.markets/dfish/will-the-sp-500-be-greater-than-or-cqz5Sct5Rg\n\nThe function buy_shares uses a heuristic to purchase up to max_amount worth of shares in sub-markets that have high payoffs. \n\nNote: dry_run must be set to false in order to execute the transaction\n\nusing ManifoldAPIs\n\nheader = Dict(\n    \"Authorization\" => \"Key authorization_key_here\",\n    \"Content-Type\" => \"application/json\"\n)\n\napi = ManifoldAPI()\nslug = \"will-the-sp-500-be-greater-than-or-cqz5Sct5Rg\"\nmax_amount = 25\ntarget_prices = [.9, .8, .7, .6, .5, .4, .3, .2, .1]\nresults = buy_shares(\n    api,\n    Multiple; \n    target_prices,\n    max_amount,\n    header,\n    slug,\n    dry_run = true,\n)\n\n\n\n\n\n","category":"function"},{"location":"api/#schedule","page":"API","title":"schedule","text":"","category":"section"},{"location":"api/#Base.schedule","page":"API","title":"Base.schedule","text":"schedule(\n    api::AbstractAPI; \n    transact,\n    can_transact,\n    delay = 1, \n    args_can = (),\n    kwargs_can = (),\n    args = (),\n    kwargs = ()\n)\n\nSchedules a transaction by calling the function transact when the conditions specified in the function can_transact are satisfied.\n\nArguments\n\napi = ManifoldAPI(): Manifold API object which is passed to transact and can_transact\n\nKeywords\n\ntransact: a function that executes a transaction. Function signature: transact(api, args_can...; kwargs_can...) \ncan_transact: a function that specifies the conditions under which transact can be executed. Function signature: can_transact(api, args_can...; kwargs_can...) \ndelay = 1: delay in seconds to wait before checking can_transact\nargs_can = (): optional arguments for can_transact\nkwargs_can = (): optional keyword arguments for can_transact\nargs = (): optional arguments for transact\nkwargs = (): optional keyword arguments for transact\n\nExample\n\nusing Dates \nusing ManifoldAPIs\n\napi = ManifoldAPI()\n\nheader = Dict(\n    \"Authorization\" => \"Key authorization_key_here\",\n    \"Content-Type\" => \"application/json\"\n)\n\norder = Dict(\n    \"contractId\" => \"HtsxyBopv0MSywM0f0Yp\",\n    \"amount\" => 10,\n    \"outcome\" => \"YES\",\n    \"dryRun\" => true\n)\n\ncan_transact(api; time) = now() ≥ time\ntransact(api; header, order) = make_bet(api, header, order)\n\n@async transaction = schedule(\n    api; \n    transact,\n    can_transact,\n    kwargs = (; header, order),\n    kwargs_can = (; time = now() + Second(10)),\n)\n\n\n\n\n\n","category":"function"},{"location":"basic_usage/#Examples","page":"Basic Usage","title":"Examples","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"The two examples below demonstrate two of the most common operations used to interact with Manifold. See the API for a complete list of avaiable functions and examples. ","category":"page"},{"location":"basic_usage/#Example-1","page":"Basic Usage","title":"Example 1","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Example 1 demonstrates how to (1) request market information, (2) request market price history and (3) plot the price history.","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"using ManifoldAPIs\nusing DataFrames \nusing StatsPlots \n\napi = ManifoldAPI()\nmarket_slug = \"supreme-court-rules-trump-tariffs-u\"\nmarket = get_market_by_slug(api, market_slug)\nbets = get_bets(api; market_slug)\n\ndf = create_dataframe(market, bets)\nplot_prices(df; size = (800, 400))","category":"page"},{"location":"basic_usage/#Example-2","page":"Basic Usage","title":"Example 2","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Example 2 demonstrates how to submit buy shares and cancel a limit order. There are three basic ways you can buy shares. ","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"Immediately buy shares at the current price. The optional keyword limitProb is ignored in this case.\nSet a limit order for a price less than the current price, which will be executed if the price reaches the limit. \nSet a limit order above the current price (probability), prompting the purchase of shares to be purchased until the price reaches the limitePrice the specified amount has been purchased, whichever happens first. If the limit is reached, any remaining funds will be spent if the price falls below limitProb. Alternatively, the user can explicitly cancel the limit order for the remaining funds by explicitly calling cancel_limit_order. ","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"The example below demonstrates how to perform the 3 option above. Here, we assume the current price is .60 and we want to buy shares until the target price has been reached, or all 100 Mana has been spent. Note that the authorization key can be found by clicking on your profile picture, clicking on the settings gear at the top right, and clicking on the Account Settings tab. The authorization key is in the field called API key.","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"using ManifoldAPIs\n\nheader = Dict(\n    \"Authorization\" => \"Key authorization_key_here\",\n    \"Content-Type\" => \"application/json\"\n)\n\norder = Dict(\n    \"contractId\" => \"HtsxyBopv0MSywM0f0Yp\",\n    \"amount\" => 100,\n    \"outcome\" => \"YES\",\n    \"limitProb\" => .70,\n    \"dryRun\" => true\n)\n\napi = ManifoldAPI()\nresponse = make_bet(api, header, order)\ncancel_limit_order(api, response.betId)","category":"page"},{"location":"basic_usage/#Example-3","page":"Basic Usage","title":"Example 3","text":"","category":"section"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"In this example, we demonstrate how to automate the purchasing of shares with the function buy_shares. To use this function, you must specify the market type, the maximum amount you would to spend, and the target prices. The purchases shares from the option(s) with the highest expected value until the target prices are satisfied, or the maximum amount of Mana has been depleted.","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"using ManifoldAPIs\n\nheader = Dict(\n    \"Authorization\" => \"Key authorization_key_here\",\n    \"Content-Type\" => \"application/json\"\n)\n\napi = ManifoldAPI()\nslug = \"will-the-sp-500-be-greater-than-or-cqz5Sct5Rg\"\nmax_amount = 25\ntarget_prices = [.9, .8, .7, .6, .5, .4, .3, .2, .1]\nresults = buy_shares(\n    api,\n    Multiple; \n    target_prices,\n    max_amount,\n    header,\n    slug,\n    dry_run = false,\n)","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"The function buy_shares also accepts a dictionary as an input for target_prices to ensure that the values are mapped to the correct option in a Multiple Unlinked market based on option label. The keys in the dictionary are the labels of the options in the market. The order of entries does not matter.","category":"page"},{"location":"basic_usage/","page":"Basic Usage","title":"Basic Usage","text":"target_prices = [\n    \"S&P500 ≥ 7000\" => .1\n    \"S&P500 ≥ 6200\" => .9, \n    \"S&P500 ≥ 6400\" => .7, \n    \"S&P500 ≥ 6700\" => .4, \n    \"S&P500 ≥ 6800\" => .3, \n    \"S&P500 ≥ 6300\" => .8, \n    \"S&P500 ≥ 6900\" => .2, \n    \"S&P500 ≥ 6500\" => .6, \n    \"S&P500 ≥ 6600\" => .5, \n]","category":"page"},{"location":"#ManifoldAPIs","page":"Home","title":"ManifoldAPIs","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This package allows users to interface with Manifold through the API using the Julia programming language. Navigate the panel on the left to find more information.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Add registry to package manager via","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\npkg\"registry add https://github.com/itsdfish/Registry.jl\"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Add package to environment via ","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg \nPkg.add(\"ManifoldAPIs\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"or via package mode by entering ] followed by","category":"page"},{"location":"","page":"Home","title":"Home","text":"add ManifoldAPIs","category":"page"}]
}
